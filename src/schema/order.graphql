input OrderItemInput {
	productId: ID!
	variantId: ID!
	quantity: Int!
}

input OrderWhereInput {
	status: OrderStatus
}

extend type Mutation {
	orderCreate(items: [OrderItemInput!]!): Order
	orderItemsUpdate(
		id: ID!
		items: [OrderItemInput!]!
		updateMethod: OrderItemsUpdateMethod
	): Order
	orderUpdateStatus(id: ID!, status: OrderStatus!): Order
}

extend type Query {
	order(id: ID!, where: OrderWhereInput): Order
}

enum OrderStatus {
	DRAFT
	PENDING
	PAID
}

enum OrderItemsUpdateMethod {
	SET
	INCREMENT
}
type Order {
	id: ID!
	items(skip: Int, first: Int): [OrderItem!]!
	totalItems: Int!
	status: OrderStatus!
	createdAt: DateTime
	updatedAt: DateTime
}
