// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String @id @default(cuid())
  name        String
  slug        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  averageRating Float @default(0)
  categories  ProductCategory[]
  collections ProductCollection[]
  ratings     Rating[]
  images      ProductImage[]
  variants    ProductVariant[]
}

model Category{
  id          String @id @default(cuid())
  name        String
  slug        String
  products    ProductCategory[]
}

model ProductCategory{
  id          String @id @default(cuid())
  productId   String
  categoryId  String
  product     Product @relation(fields: [productId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
}

model Order{
  id          String @id @default(cuid())
  items       OrderItem[]
  totalItems  Int @default(0)
  status      OrderStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem{
  id              String @id @default(cuid())
  orderId         String
  order           Order @relation(fields: [orderId], references: [id])
  quantity        Int
  price           Int
  name            String
  variantName     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productId       String
  variantId       String
  @@unique([orderId, productId, variantId])
}

model Collection{
  id          String @id @default(cuid())
  name        String
  slug        String
  description String
  products    ProductCollection[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      CollectionImage[]
}

model ProductCollection{
  id            String @id @default(cuid())
  productId     String
  collectionId  String
  product       Product @relation(fields: [productId], references: [id])
  collection    Collection @relation(fields: [collectionId], references: [id])
}

model Rating{
  id          String @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image{ 
  id          String @id @default(cuid())
  url         String
  width       Int
  height      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    ProductImage[] 
  collections CollectionImage[]
}

model ProductImage{
  id          String @id @default(cuid())
  productId   String
  imageId     String
  product     Product @relation(fields: [productId], references: [id])
  image       Image @relation(fields: [imageId], references: [id])
}

model CollectionImage{
  id             String @id @default(cuid())
  collectionId   String
  imageId        String
  collection     Collection @relation(fields: [collectionId], references: [id])
  image          Image @relation(fields: [imageId], references: [id])
}

enum OrderStatus {
	DRAFT
	PENDING
	PAID
}

model Variant {
  id    String @id @default(cuid())
  name  String
  products ProductVariant[]
}

model ProductVariant {
  id          String @id @default(cuid())
  productId   String
  variantId   String
  product     Product @relation(fields: [productId], references: [id])
  variant     Variant @relation(fields: [variantId], references: [id])
  }